
The following recipes have been used to post-process model
output on its native grid -- the so-called `LLC90` grid
:cite:`for-eta:15`. Covered topics include plotting,
interpolating, and formatting.

.. _requirements-postprocess:

.. rubric:: Prerequisites

- `Matlab <https://www.mathworks.com/products/matlab.html>`__ (proprietary) or
  `Octave <https://www.gnu.org/software/octave/>`__ (free) plus the
  :numref:`download-tools` Toolboxes.
- Grid files from either `this nctiles_grid/ <http://mit.ecco-group.org/opendap/ecco_for_las/version_4/release2/nctiles_grid/>`__
  or the :numref:`rerun-alpha-version` `run/` directory.

.. _analyze:

.. rubric:: Plot And Analyze

The following recipe reads in native grid output in binary format (generated
directly by `MITgcm`) or in tiled `Netcdf` format (created from `MITgcm` output
via :ref:`reformat`). It decpicts various variables and compile all of the
generated plots in the so-called `solution booklet`.

::

    To be continued...

.. _interpolate:

.. rubric:: Interpolate Output

The following `Matlab` recipe reads in binary, native grid, output from `MITgcm`
and interpolates it to a regular :math:`1/2\times1/2^\circ` longitude-latitude
grid. The `CBIOMES-global (alpha version)` interpolated climatology was
created by feeding the results of this recipe to the :ref:`reformat` recipe.

::

    p = genpath([pwd '/tools/matlab/']); addpath(p);
    process2interp_driver([pwd '/run/']);
    !mv run/diags/diags_interp_tmp run/diags_interp

.. _reformat:

.. rubric:: Convert to Netcdf

The first recipe below takes the result of :ref:`interpolate` and converts it
into `Netcdf` files.

::

    p = genpath([pwd '/tools/matlab/']); addpath(p);
    interp2nctiles_driver([pwd '/run/']);
    !mv run/diags_interp/nctiles_tmp run/diags_interp_netcdf

The next recipe below instead reads in native grid, binary output as generated
by `MITgcm` directly and converts it to a tiled `Netcdf` format known as
`nctiles` :cite:`for-eta:15`.

::

    p = genpath([pwd '/tools/matlab/']); addpath(p);
    process2nctiles_driver([pwd '/run/']);
    !mv run/diags/nctiles_tmp run/diags_nctiles

.. note::

   The above recipes generally extract variable names, descriptions, units, etc.
   directly from the `available_diagnostics.log` file generated by `MITgcm` with
   two potential exceptions: 1) in interpolated cases, vector fields should be
   converted to eastward / northward components, and variable names modified
   accordingly; 2) in all cases, passive tracer variables can be associated with
   more explicit names based on `PTRACERS_names` defined in `data.ptracers`.
