
The following recipes have been used to post-process model
output on its native grid -- the so-called `LLC90` grid
:cite:`for-eta:15`. Covered topics include plotting,
interpolating, and formatting.

.. _requirements-postprocess:

.. rubric:: Prerequisites

- `Matlab <https://www.mathworks.com/products/matlab.html>`__ (pro) or `Octave <https://www.gnu.org/software/octave/>`__ (free)
- `gcmfaces <http://gcmfaces.readthedocs.io/en/latest/>`__ (see :ref:`download-tools`)
- `Netcdf <https://www.unidata.ucar.edu/software/netcdf/>`__ (usually pre-installed)

.. _analyze:

.. rubric:: Plot And Analyze

The following recipe reads in native grid output in binary format (generated
directly by `MITgcm`) or in tiled `Netcdf` format (created from `MITgcm` output
via :ref:`reformat`). It decpicts various variables and compile all of the
generated plots in the so-called `solution booklet`.

::

    To be continued...

.. _interpolate:

.. rubric:: Interpolate Output

The following recipe reads in native grid, binary output from `MITgcm` and
interpolates it to a regular :math:`1/2\times1/2^\circ` longitude-latitude
grid. The `CBIOMES-global (alpha version)` interpolated climatology was
created by feeding the results of this recipe to the :ref:`reformat` recipe.
For example:

::

    dirDiags=[pwd '/diags_ALL_MDS/']; fileDiags='surf_2d_set1';
    [listInterp,listNot]=process2interp(dirDiags,fileDiags);
    process2interp(dirDiags,fileDiags,listInterp);

And so on and so forth for each of the following cases:

::

    dirDiags=[pwd '/diags_ALL_MDS/']; fileDiags='ptr_3d_set1';
    dirDiags=[pwd '/diags_ALL_MDS/']; fileDiags='gud_3d_set1';
    dirDiags=[pwd '/diags_ALL_MDS/']; fileDiags='state_2d_set1';
    dirDiags=[pwd '/diags_ALL_MDS/']; fileDiags='state_3d_set1';

.. _reformat:

.. rubric:: Convert to Netcdf

The first recipe below takes the result of :ref:`interpolate` and converts it
into `Netcdf` files.

::

    dirDiags=[pwd '/diags_ALL_INTERP/'];
    fileDiags='surf_2d_set1'; selectFld={'rmud','Rirr001','Rirr002',...
              'Rirr003','Rirr004','Rirr005','Rirr006','Rirr007',...
              'Rirr008','Rirr009','Rirr010','Rirr011','Rirr012','Rirr013'};
    interp2nctiles(dirDiags,selectFld);

Each global `Netcdf` file generated by `interp2nctiles` satisfies the so-called
`CF  conventions <http://cfconventions.org/>`__. Hence, it can
readily be ingested and depicted by software such as
`Panoply <https://www.giss.nasa.gov/tools/panoply/>`__
and many others.
The next recipe below instead reads in native grid, binary output as generated
by `MITgcm` directly and converts it to a tiled `Netcdf` format known as
`nctiles` :cite:`for-eta:15`.

::

    tileSize=[30 30];
    dirDiags=[pwd '/diags_ALL_MDS/'];
    fileDiags='surf_2d_set1'; selectFld={'rmud','Rirr001','Rirr002',...
              'Rirr003','Rirr004','Rirr005','Rirr006','Rirr007',...
              'Rirr008','Rirr009','Rirr010','Rirr011','Rirr012','Rirr013'};
    process2nctiles(dirDiags,fileDiags,selectFld,tileSize);

Each `nctiles` collection can be ingested by
`gcmfaces <http://gcmfaces.readthedocs.io/en/latest/>`__ to
carry out accurate, global computations on the native model grid.
In addition, all `Netcdf` files generated by `process2nctiles`
again satisfy the `CF  conventions <http://cfconventions.org/>`__
and can be depicted individually using `Panoply`, etc.
The `CBIOMES-global (alpha version)` climatology was created
by applying these recipes to each of the following cases:

::

    fileDiags='ptr_3d_set1'; selectFld=PTRACERS_varnames;
    fileDiags='gud_3d_set1'; selectFld={'PP','Nfix','Denit','PAR','PARF'};
    fileDiags='state_2d_set1'; selectFld={'ETAN','SIarea','SIheff','SIhsnow',...
     'PHIBOT','sIceLoad','MXLDEPTH','SIatmQnt','SIatmFW','oceQnet','oceFWflx'};
    fileDiags='state_3d_set1'; selectFld={'THETA','SALT','DRHODR'};

.. note::

   The above recipes generally extract variable names, descriptions, units, etc.
   directly from `available_diagnostics.log` as generated by `MITgcm`. But,
   there are two exceptions: 1) in interpolated cases, vector fields were
   converted to eastward / northward components, and variable names modified
   accordingly; 2) in all cases, passive tracer variables were associated with
   more explicit names based on `PTRACERS_names` defined in `data.ptracers`.
